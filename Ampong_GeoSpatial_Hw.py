# -*- coding: utf-8 -*-
"""08_-_Geospatial_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LkAfdQnk2tmNth_4DmK7IKwifDta3OMW

# Dustin Ampong Geospatial Exercies Health Amenties in provinces

# Hands-on: Geospatial Data with `geopandas`

This hands-on will introduce you to `geopandas` which allows you to read in _vector_ spatial data and also visualize it which builds on your tool set for exploratory data analysis and visualization.

If you're interested in knowing how to handle _raster_ data, there's a library called [rasterio](https://rasterio.readthedocs.io/en/stable/).
"""

!pip install --upgrade geopandas

!pip install --upgrade pyshp
!pip install --upgrade shapely
!pip install --upgrade descartes

!apt install gdal-bin python-gdal python3-gdal
!apt install python3-rtree 
!pip install git+git://github.com/geopandas/geopandas.git
!pip install descartes
!pip install folium
!pip install plotly_express

# Commented out IPython magic to ensure Python compatibility.


import os
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt

from shapely.geometry import Point

# %pylab inline

"""## Reading Files

`geopandas` is built mainly for vector-based spatial data. It utilizes the [`fiona`](https://fiona.readthedocs.io/en/latest/README.html) library which is capable of reading and writing a variety of GIS-formats.

For this class, we will focus on loading data from **shapefiles and GeoJSON formats**.

The main function to read in these files is `gpd.read_file`.
"""

gpd.read_file?

"""### Shapefile

Download the geometric administrative boundaries of the Philippines from GADM.

GADM Philippines: https://biogeo.ucdavis.edu/data/gadm3.6/shp/gadm36_PHL_shp.zip

Note that this is a ZIP file. Unzip the main folder to DSDATA and keep the folder structure within as is.
"""

# Read shapefile
ph = gpd.read_file('DSDATA/gadm36_PHL_1.shp')
ph.head(50)

type(ph)

ax = ph.plot(figsize=(30,20), color="w", edgecolor="dimgray")

ax.axis('off')

"""### GeoJSON

For GeoJSON, you must specify the `driver='GeoJSON'` to the `read_file` function.

The data below is from the Humanitarian Data Exchange. Download it and place it in `DSDATA` as well.

Philippine Health Sites: https://data.humdata.org/dataset/20e5069f-1eb8-465b-98c8-3442a62cd3f0/resource/ca65b30e-02c8-4fad-8771-fb220ddc444f/download/philippines.geojson
"""

# Read GeoJSON file
healthsites = gpd.read_file('DSDATA/philippines.geojson', driver='GeoJSON')
healthsites.head()

"""### CSV

Sometimes we have data in a normal CSV file but it also contains geographic information in different columns. A common example would be having the longitude and latitude in two separate columns. Since we are aware that there is value in having the data as a geometric point, there is a way to convert two columns to a `Point` using `shapely`.

CitiBike Historical Trip Data: https://s3.amazonaws.com/tripdata/index.html

We should already have the a CitiBike trip data file from the previous lab.
"""

# Read in the data using pandas

citibike = pd.read_csv(os.getenv('DSDATA') + '/202102-citibike-tripdata.csv')
citibike.head()

citibike.shape

"""Since the data is huge, this might take a long time to run because geometric operations is quite expensive (computationally) on a local machine. """

stations = citibike[['end station longitude', 'end station latitude']]

stations.drop_duplicates(inplace=True)
stations.shape

# Create the geometry
geometry = [Point(xy) for xy in zip(stations['end station longitude'], 
                                    stations['end station latitude'])]

# Set the crs
crs = {'init': 'epsg:4326'}

# Create the GeoDataFrame from the DataFrame
citi_gdf = gpd.GeoDataFrame(stations, crs=crs, geometry=geometry)
citi_gdf.head()

"""## Basic Visualization

With `matplotlib` and `descartes` built into `geopandas`, we can easily plot a `GeoDataFrame` by simply calling the `plot` function. Most of the parameters that come with the `plot` function from `pandas` can also be used here.
"""

ax = ph.plot(figsize=(15, 18), color='whitesmoke', edgecolor='dimgray')
ax.axis('off')

"""## Projections
Different datasets would have different projections to minimize the distortion depending on where they are on the globe. When doing spatial analysis, it is normal to be working with multiple datasets in different formats and different projections depending on how they were collected or how they should be presented.

Let us take the example of the New York City Taxi Zones and CitiBike stations. We already have the CitiBike stations from the example above.

- NYC Taxi Zones: https://s3.amazonaws.com/nyc-tlc/misc/taxi_zones.zip
"""

taxi = gpd.read_file(os.getenv('DSDATA') + '/taxi_zones/taxi_zones.shp')
taxi.crs

ax = taxi.plot(figsize=(15, 15), color='white', edgecolor='k')
citi_gdf.plot(ax=ax, color='dodgerblue', alpha=0.3);

print('Taxizones CRS', taxi.crs)
print('Citi Bike CRS', citi_gdf.crs)

# First option is to pass a dictionary like how we initialized the citibike dataframe - this is the CRS
citi_gdf = citi_gdf.to_crs({'init': 'epsg:2263'})

# Another is to simply pass the code for the epsg through the epsg parameter
#citi_gdf = citi_gdf.to_crs(epsg=2263)

fig = plt.figure(figsize=(15, 10))
ax = fig.add_subplot(111)
taxi.plot(ax=ax, color='white', edgecolor='dimgray')
citi_gdf.plot(ax=ax, color='dodgerblue', alpha=0.35)
ax.set_title('Citibike Stations NYC Taxi Zones', fontsize=15)
ax.axis('off');

"""## Merging Data

There are two ways we can merge data in GeoPandas:
1. Attribute join
2. Spatial join

### Attribute join
This is when you merge two datasets based on a common column. Similar to how you would merge two regular `pandas DataFrame`s. 

**IMPORTANT**

When merging a `GeoDataFrame` and a `DataFrame`, it is important that the **left** `DataFrame` is the one with the geospatial data. Otherwise, the `GeoDataFrame` will turn into a regular `DataFrame` and lose all the features and functions of a `GeoDataFrame`.

**Data**
- World Population Data (World Bank): http://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=csv
- Countries shapefile: https://www.naturalearthdata.com/downloads/10m-cultural-vectors/10m-admin-0-countries/

*Note: The countries shapefile is also available within geopandas through `gpd.datasets.get_path('naturalearth_lowres')` but this data seems to be outdated as it only has 177 rows.*
"""

# Read in the shapefile from the download
world = gpd.read_file(os.getenv('DSDATA') + '/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp')
world.head()

population = pd.read_csv(os.getenv('DSDATA') + '/API_SP.POP.TOTL_DS2_en_csv_v2_2252106/API_SP.POP.TOTL_DS2_en_csv_v2_2252106.csv',
                         skiprows=3)
population.dropna(axis=1, how='all', inplace=True)
print(len(population))
population.head(3)

country_shapes = world[['ADMIN', 'ADM0_A3', 'geometry']]
type(country_shapes)

# Merge the two dataframes
# Here I used LEFT JOIN first to be able to get all the country shapes
country_pop = country_shapes.merge(population, left_on='ADM0_A3', right_on='Country Code', how='left')
country_pop.head()

# However, looking at the tail of the dataset, we can see that there are certain areas that have no population data
country_pop.tail()

ax = country_pop.plot(figsize=(15,8), column='2016', cmap=plt.cm.Reds, legend=True, edgecolor='gainsboro')
ax.set_title('Population of the world in 2016', fontsize=15);
ax.axis(False)

# Let's drop the rows with NaN's so we can actually see the population distribution arcoss the world
country_pop.dropna(axis=0, how='any', inplace=True)
country_pop.shape

ax = country_pop.plot(figsize=(15,8), column='2016', cmap=plt.cm.Reds, legend=True, edgecolor='gainsboro')
ax.set_title('Population of the world in 2016', fontsize=15)
ax.axis('off');

"""### Spatial Join
Spatial join is already built into `geopandas` through the function `gpd.sjoin()`. The spatial operation is passed through the parameter `op` and the join can also be specified like a merge in `pandas` through the parameter `how`.

The main thing to remember when doing a spatial join is the **order** of the `GeoDataFrame` parameters you pass matters. When you do an `sjoin`, only the geometry of the left `GeoDataFrame` is left in the merged data. So make sure you carefully consider what data you want left behind and it also depends on what question you are trying to answer.
"""

gpd.sjoin?

"""#### Data Cleaning through Spatial Join
Another useful purpose of a spatial join is to clean out erroneous data or exclude data from the study area. From our previous example of the Citibike stations and NYC taxi zones, we can now remove the erroneous data from the NYC study area.
"""

# This spatial join will return the points within a polygon
# The basic question answered here is "in which taxi zone is the station located?"
stations_within = gpd.sjoin(citi_gdf, taxi, op='within')
stations_within.head()

fig = plt.figure(figsize=(15, 10))
ax = fig.add_subplot(111)
taxi.plot(ax=ax, color='white', edgecolor='dimgray')
stations_within.plot(ax=ax, color='dodgerblue', alpha=0.35)
ax.set_title('Citibike Stations on NYC Taxi Zones', fontsize=15)
ax.axis('off');

# This spatial will return the polygons that contain points
# The basic question answered here is "which taxi zones have citibike stations?"
zones_with_stations = gpd.sjoin(taxi, citi_gdf, op='contains')
zones_with_stations.head()

fig = plt.figure(figsize=(15, 10))
ax = fig.add_subplot(111)
zones_with_stations.plot(ax=ax, color='white', edgecolor='dimgray')
ax.set_title('Taxi Zones with Stations', fontsize=15)
ax.axis('off');

print(healthsites.crs)
print(ph.crs)

fig = plt.figure(figsize=(30, 20))
ax = fig.add_subplot(111)
ph.plot(ax=ax, color='white', edgecolor='dimgray')
healthsites.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Health-related Amenities in the Philippines', fontsize=15)
ax.axis('off');

healthsites.describe(include=np.object)

healthsites.isna().sum()

fig = plt.figure(figsize=(30, 20))
ax = fig.add_subplot(111)

ph.plot(ax=ax, color='white', edgecolor='dimgray')
healthsites.plot(ax=ax, column="amenity", cmap="Paired", alpha=0.35, legend=True)
ax.set_title('Health-related Amenities in the Philippines', fontsize=15)
ax.axis('off');

mm = ph[ph.NAME_1=="Metropolitan Manila"]
mm.plot()

"""# Exercise

For this individual exercise, your task is to use the PH Administrative Areas and Health Sites datasets, and produce an effective visualization for the following question:

### How many health-related amenities are there in provinces where you, your family, and your relatives are currently residing in?

In your plot, there should be a minimum of 2 provinces and a maximum of 5 provinces. There should be separate plots for each type of amenity available.
"""

#NEWDATA= ph.loc[ ph.NAME_1.str.contains('Metropolitan Manila',case=False)  | ph.NAME_1.str.contains('Cavite',case=False)]
##NEWDATA= ph.loc[ph.NAME_1.str.contains('Cavite')]
#NEWDATA

"""### Metro Manila"""

mm = ph[ph.NAME_1=="Metropolitan Manila"]
mm.plot()

health_aminity= healthsites.groupby(["amenity"])['osm_id'].count()
health_aminity

"""#### Merging Healthsites with Metro manila to get filterd out health aminities only in metro manila"""

## Manila health aminities
health = gpd.sjoin(healthsites, mm, op='within')
health

mm_other= health[health.amenity=='']
mm_other.osm_id.count()

"""#### TO get all aminiites in Metro Manila and get all aminities to later on filter out"""

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
mm.plot( ax =ax,color='white', edgecolor='dimgray')
health.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('All Health Aminities in Metro Manila', fontsize=15)
ax.axis('off');

"""#### Filtering per amenity"""

### For each health aminity in  metro manila

mm_other= health[health.amenity=='']
mmclinic= health[health.amenity=='clinic']
mmdentist= health[health.amenity=='dentist']
mmdoctor= health[health.amenity=='doctors']
mmhealthcare= health[health.amenity=='healthcare']
mmhospital= health[health.amenity=='hospital']
mmpharmacy= health[health.amenity=='pharmacy']

print("Other Health Amenity count in Metro Manila:", mm_other.osm_id.count()) 
fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
mm.plot( ax =ax,color='white', edgecolor='dimgray')
mm_other.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Health Aminity in Metro Manila', fontsize=15)
ax.axis('off');

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
mm.plot( ax =ax,color='white', edgecolor='dimgray')
mmclinic.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Clinics in Metro Manila', fontsize=15)
ax.axis('off');
print("Clinic count in Metro Manila:", mmclinic.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
mm.plot( ax =ax,color='white', edgecolor='dimgray')
mmdentist.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Dentists in Metro Manila', fontsize=15)
ax.axis('off');
print("Dentist count in Metro Manila:", mmdentist.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
mm.plot( ax =ax,color='white', edgecolor='dimgray')
mmdoctor.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Health Aminity: Doctor in Metro Manila', fontsize=15)
ax.axis('off');
print("Doctors count in Metro Manila:", mmdoctor.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
mm.plot( ax =ax,color='white', edgecolor='dimgray')
mmhealthcare.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Healthcares in Metro Manila', fontsize=15)
ax.axis('off');
print("Healthcare count in Metro Manila:", mmhealthcare.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
mm.plot( ax =ax,color='white', edgecolor='dimgray')
mmhospital.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Hospitals in Metro Manila', fontsize=15)
ax.axis('off');
print("Hospital count in Metro Manila:", mmhospital.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
mm.plot( ax =ax,color='white', edgecolor='dimgray')
mmpharmacy.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
#ax.set_title('', fontsize=15)
ax.axis('off');
print("pharmacy count in Metro Manila:", mmpharmacy.osm_id.count())

"""### Cavite Province"""

cavite = ph[ph.NAME_1=="Cavite"]
cavite.plot()

"""#### Merging cavite and the healthsites"""

## Manila health aminities
healthcavite = gpd.sjoin(healthsites, cavite, op='within')
healthcavite

"""#### Checking all health amenities in cavite"""

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cavite.plot( ax =ax,color='white', edgecolor='dimgray')
healthcavite.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('All Health Aminities in Cavite', fontsize=15)
ax.axis('off');

"""#### Filtering out Cavite Health Amenities"""

### For each health aminity in  metro manila

cav_other= healthcavite[healthcavite.amenity=='']
cavclinic= healthcavite[healthcavite.amenity=='clinic']
cavdentist= healthcavite[healthcavite.amenity=='dentist']
cavdoctor= healthcavite[healthcavite.amenity=='doctors']
cavhospital= healthcavite[healthcavite.amenity=='hospital']
cavpharmacy= healthcavite[healthcavite.amenity=='pharmacy']

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cavite.plot( ax =ax,color='white', edgecolor='dimgray')
cav_other.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Other Health Aminities in Cavite', fontsize=15)
ax.axis('off');
print("Other Health Amenity count in Cavite:", cav_other.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cavite.plot( ax =ax,color='white', edgecolor='dimgray')
cavclinic.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Clinics in Cavite', fontsize=15)
ax.axis('off');
print("Clinic count in Cavite:", cavclinic.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cavite.plot( ax =ax,color='white', edgecolor='dimgray')
cavdentist.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Dentist in Cavite', fontsize=15)
ax.axis('off');
print("Dentist count in Cavite:", cavdentist.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cavite.plot( ax =ax,color='white', edgecolor='dimgray')
cavdoctor.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Doctors in Cavite', fontsize=15)
ax.axis('off');
print("Doctor count in Cavite:", cavdoctor.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cavite.plot( ax =ax,color='white', edgecolor='dimgray')
cavpharmacy.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Pharmacies in Cavite', fontsize=15)
ax.axis('off');
print("Pharmacy count in Cavite:", cavpharmacy.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cavite.plot( ax =ax,color='white', edgecolor='dimgray')
cavhospital.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Hospitals in Cavite', fontsize=15)
ax.axis('off');
print("Hospital count in Cavite:", cavhospital.osm_id.count())

"""### Cebu province

"""

cebu = ph[ph.NAME_1=="Cebu"]
cebu.plot()

"""#### Mergin Cebu and Health Amenities"""

## cebu aminities
healthcebu = gpd.sjoin(healthsites, cebu, op='within')
healthcebu

"""#### Checking all health aminities in cebu"""

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cebu.plot( ax =ax,color='white', edgecolor='dimgray')
healthcebu.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('All Health Aminities in Cebu', fontsize=15)
ax.axis('off');

"""#### Filtering out amenities

"""

### For each health aminity in  metro manila

cebu_other= healthcebu[healthcebu.amenity=='']
cebuclinic= healthcebu[healthcebu.amenity=='clinic']
cebudentist= healthcebu[healthcebu.amenity=='dentist']
cebudoctor= healthcebu[healthcebu.amenity=='doctors']
cebuhospital= healthcebu[healthcebu.amenity=='hospital']
cebupharmacy= healthcebu[healthcebu.amenity=='pharmacy']

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cebu.plot( ax =ax,color='white', edgecolor='dimgray')
cebu_other.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Other Health Amenties in Cavite', fontsize=15)
ax.axis('off');
print("Other Health Amenity count in Cavite:", cebu_other.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cebu.plot( ax =ax,color='white', edgecolor='dimgray')
cebuclinic.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Clinics in Cavite', fontsize=15)
ax.axis('off');
print("Clinic count in Cavite:", cebuclinic.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cebu.plot( ax =ax,color='white', edgecolor='dimgray')
cebudentist.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Dentists in Cavite', fontsize=15)
ax.axis('off');
print("Dentist count in Cavite:", cebudentist.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cebu.plot( ax =ax,color='white', edgecolor='dimgray')
cebudoctor.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Doctors in Cavite', fontsize=15)
ax.axis('off');
print("Doctor count in Cavite:", cebudoctor.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cebu.plot( ax =ax,color='white', edgecolor='dimgray')
cebuhospital.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Hospitals in Cavite', fontsize=15)
ax.axis('off');
print("Hospital count in Cavite:", cebuhospital.osm_id.count())

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)
cebu.plot( ax =ax,color='white', edgecolor='dimgray')
cebupharmacy.plot(ax=ax, column="amenity", alpha=0.35, legend=True)
ax.set_title('Pharmacies in Cavite', fontsize=15)
ax.axis('off');
print("Pharmacy count in Cavite:", cebupharmacy.osm_id.count())